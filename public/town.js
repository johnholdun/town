// Generated by CoffeeScript 1.7.1
(function() {
  var collision, dim, el, getPlayerEl, intent, interval, lastUpdate, loadCollision, location, receiveUpdate, sendUpdate, setEntities, setViewport, userId, viewportLocation;

  el = {
    viewport: null,
    map: null,
    land: null,
    player: null
  };

  dim = {
    tile: {
      w: 16,
      h: 16,
      factor: 1
    },
    viewport: {
      w: 160,
      h: 128,
      tileW: 10,
      tileH: 8
    }
  };

  location = null;

  viewportLocation = null;

  intent = {};

  collision = [];

  lastUpdate = 0;

  interval = 100;

  userId = null;

  addEventListener("load", function() {
    el.viewport = document.querySelector("#viewport");
    el.map = document.querySelector("#map");
    el.land = document.querySelector("#land");
    el.collision = document.querySelector("#collision");
    el.viewport.style.width = window.innerWidth / 2 + "px";
    el.viewport.style.height = window.innerWidth / 2 / dim.viewport.width / dim.viewport.height + "px";
    el.viewport.style.margin = "" + (parseInt(el.viewport.style.height, 10) / -2) + "px " + (parseInt(el.viewport.style.width, 10) / -2) + "px";
    dim.tile.factor = parseInt(el.viewport.style.width, 10) / dim.viewport.w;
    el.map.setAttribute("width", parseInt(el.map.offsetWidth, 10) * dim.tile.factor);
    el.map.setAttribute("height", parseInt(el.map.offsetHeight, 10) * dim.tile.factor);
    el.land.setAttribute("width", el.map.getAttribute("width"));
    el.land.setAttribute("height", el.map.getAttribute("height"));
    if (window.localStorage && window.localStorage.userId) {
      userId = window.localStorage.userId;
    }
    return sendUpdate();
  });

  loadCollision = function() {
    var collWidth, collisionCanvas, collisionContext, collisionData, i, pixel, x, y, _results;
    collisionCanvas = document.createElement("canvas");
    collisionCanvas.setAttribute("width", parseInt(el.collision.getAttribute("width", 10)));
    collisionCanvas.setAttribute("height", parseInt(el.collision.getAttribute("height", 10)));
    collisionContext = collisionCanvas.getContext("2d");
    collisionContext.drawImage(el.collision, 0, 0);
    el.collision.parentNode.removeChild(el.collision);
    collisionData = collisionContext.getImageData(0, 0, parseInt(collisionCanvas.getAttribute("width"), 10), parseInt(collisionCanvas.getAttribute("height"), 10)).data;
    collision = [];
    collWidth = parseInt(el.collision.getAttribute("width", 10));
    i = 0;
    _results = [];
    while (i < collisionData.length) {
      pixel = Math.floor(i / 4);
      y = Math.floor(pixel / collWidth);
      x = pixel - (y * collWidth);
      if (x === 0) {
        collision[y] = [];
      }
      collision[y][x] = [collisionData[i], collisionData[i + 1], collisionData[i + 2]];
      _results.push(i += 4);
    }
    return _results;
  };

  setViewport = function(viewport) {
    el.map.style.left = -1 * viewport.x * dim.tile.w * dim.tile.factor + "px";
    return el.map.style.top = -1 * viewport.y * dim.tile.h * dim.tile.factor + "px";
  };

  sendUpdate = function() {
    var data, xhr;
    lastUpdate = (new Date()).valueOf();
    xhr = new XMLHttpRequest();
    xhr.open('POST', '/', true);
    xhr.responseType = 'text';
    xhr.onload = function(e) {
      return receiveUpdate(lastUpdate, JSON.parse(this.response));
    };
    data = new FormData();
    if (userId) {
      data.append("id", userId);
    }
    if (intent.hasOwnProperty("x")) {
      data.append("intent[x]", intent.x);
    }
    if (intent.hasOwnProperty("y")) {
      data.append("intent[y]", intent.y);
    }
    return xhr.send(data);
  };

  receiveUpdate = function(lastUpdate, response) {
    var remainder;
    if (userId !== response.id) {
      userId = response.id;
      if (window.localStorage) {
        window.localStorage.userId = userId;
      }
    }
    setEntities(response.entities);
    setViewport(response.viewport);
    remainder = interval - ((new Date()).valueOf() - lastUpdate);
    if (remainder <= 0) {
      return sendUpdate();
    } else {
      return setTimeout(sendUpdate, remainder);
    }
  };

  getPlayerEl = function(id) {
    var playerEl;
    playerEl = document.querySelector("#player-" + id);
    if (!playerEl) {
      playerEl = document.createElement("img");
      playerEl.setAttribute("id", "player-" + id);
      playerEl.setAttribute("width", dim.tile.w * dim.tile.factor);
      playerEl.setAttribute("height", dim.tile.h * dim.tile.factor);
      playerEl.setAttribute("src", "bomb-mario.png");
      playerEl.setAttribute("class", "player");
      playerEl.setAttribute("style", "-webkit-filter: hue-rotate(" + (parseInt(id, 16) % 360) + "deg)");
      el.map.appendChild(playerEl);
    }
    return playerEl;
  };

  setEntities = function(entities) {
    return _.each(entities, function(entity) {
      var playerEl;
      playerEl = getPlayerEl(entity.id);
      playerEl.style.left = entity.x * dim.tile.w * dim.tile.factor + "px";
      return playerEl.style.top = entity.y * dim.tile.w * dim.tile.factor + "px";
    });
  };

  addEventListener("keydown", function(e) {
    switch (e.which) {
      case 37:
        intent.x = -1;
        return delete intent.y;
      case 38:
        intent.y = -1;
        return delete intent.x;
      case 39:
        intent.x = 1;
        return delete intent.y;
      case 40:
        intent.y = 1;
        return delete intent.x;
    }
  });

  addEventListener("keyup", function(e) {
    switch (e.which) {
      case 37:
        return delete intent.x;
      case 38:
        return delete intent.y;
      case 39:
        return delete intent.x;
      case 40:
        return delete intent.y;
    }
  });

}).call(this);
